import { Command } from "./command.class";
import { Markup, Telegraf } from "telegraf";
import { IBotContext } from "../context/context.interface";
import { DateTime } from "luxon"; // –ò–º–ø–æ—Ä—Ç Luxon
import groupScheduleData from "../datas/groupSheduleData";

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ScheduleItem
interface ScheduleItem {
	date: Date;
	data: {
		subject: string;
		educator: string;
		time: string;
	}[];
}

export class StartCommand extends Command {
	private scheduleData: ScheduleItem[] = [];
	constructor(bot: Telegraf<IBotContext>) {
		super(bot);
	}
	
	handle(): void {
		this.bot.start(async (ctx) => {
			await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É:');
			ctx.session.state = 'waiting_group';
		});
		
		this.bot.on('text', async (ctx) => {
			if (ctx.session.state === 'waiting_group') {
				const userGroup = ctx.message.text.trim();
				const groupData = groupScheduleData.find(group => group.group === userGroup);
				if (groupData) {
					this.scheduleData = groupData.sheduleData;
					let buttons = []
					
					if (ctx.session.isSubscribe) {
						buttons = [
							Markup.button.callback('–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ', 'show_schedule_today'),
							Markup.button.callback('–ù–∞ –∑–∞–≤—Ç—Ä–∞', 'show_schedule_tomorrow'),
							Markup.button.callback('–ù–∞ —Ç–∏–∂–¥–µ–Ω—å', 'show_schedule_week'),
							Markup.button.callback('–í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –≥—Ä—É–ø—É', 'back_to_main'),
							Markup.button.callback('üëé', 'unsubscribe'),
						]
					} else {
						buttons = [
							Markup.button.callback('–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ', 'show_schedule_today'),
							Markup.button.callback('–ù–∞ –∑–∞–≤—Ç—Ä–∞', 'show_schedule_tomorrow'),
							Markup.button.callback('–ù–∞ —Ç–∏–∂–¥–µ–Ω—å', 'show_schedule_week'),
							Markup.button.callback('–í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –≥—Ä—É–ø—É', 'back_to_main'),
							Markup.button.callback('üëç', 'subscribe'),
						]
					}
					ctx.reply('–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –ø–æ–∫–∞–∑—É —Ä–æ–∑–∫–ª–∞–¥—É –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –≥—Ä—É–ø–∏:', Markup.inlineKeyboard(buttons));
					ctx.session.state = 'idle';
				} else {
					ctx.reply('–ì—Ä—É–ø–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:', Markup.inlineKeyboard([
						Markup.button.callback('–í–≤–µ—Å—Ç–∏ –≥—Ä—É–ø—É –ø–æ–≤—Ç–æ—Ä–Ω–æ', 'back_to_main'),
					]));
				}
			}
		});
		
		this.bot.action("show_schedule_today", async (ctx) => {
			const today = DateTime.local().toFormat('yyyy-MM-dd');
			const todaySchedule = this.scheduleData.find(item => DateTime.fromJSDate(item.date).toFormat('yyyy-MM-dd') === today);
			if (todaySchedule) {
				const scheduleText = todaySchedule.data.map(item => `${item.subject} (${item.time}) - ${item.educator}`).join('\n');
				await ctx.reply(`–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n${scheduleText}`, Markup.inlineKeyboard([
					Markup.button.callback('–ù–∞ –∑–∞–≤—Ç—Ä–∞', 'show_schedule_tomorrow'),
					Markup.button.callback('–ù–∞ —Ç–∏–∂–¥–µ–Ω—å', 'show_schedule_week'),
					Markup.button.callback('–í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –≥—Ä—É–ø—É', 'back_to_main'),
					ctx.session.isSubscribe ? Markup.button.callback('üëé', 'unsubscribe') : Markup.button.callback('üëç', 'subscribe'),
				]));
			} else {
				await ctx.reply('–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.');
			}
		});
		
		this.bot.action("show_schedule_tomorrow", async (ctx) => {
			const tomorrow = DateTime.local().plus({ days: 1 }).toFormat('yyyy-MM-dd');
			const tomorrowSchedule = this.scheduleData.find(item => DateTime.fromJSDate(item.date).toFormat('yyyy-MM-dd') === tomorrow);
			if (tomorrowSchedule) {
				const scheduleText = tomorrowSchedule.data.map(item => `${item.subject} (${item.time}) - ${item.educator}`).join('\n');
				await ctx.reply(`–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n${scheduleText}`, Markup.inlineKeyboard([
					Markup.button.callback('–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ', 'show_schedule_today'),
					Markup.button.callback('–ù–∞ —Ç–∏–∂–¥–µ–Ω—å', 'show_schedule_week'),
					Markup.button.callback('–í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –≥—Ä—É–ø—É', 'back_to_main'),
					ctx.session.isSubscribe ? Markup.button.callback('üëé', 'unsubscribe') : Markup.button.callback('üëç', 'subscribe'),
				]));
			} else {
				await ctx.reply('–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.');
			}
		});
		
		this.bot.action("show_schedule_week", async (ctx) => {
			const today = DateTime.local().startOf('week');
			const endOfWeek = DateTime.local().endOf('week');
			const weekSchedule = this.scheduleData.filter(item => {
				const itemDate = DateTime.fromJSDate(item.date);
				return itemDate >= today && itemDate <= endOfWeek;
			});
			if (weekSchedule.length > 0) {
				const scheduleText = weekSchedule.map(day => {
					const formattedDate = DateTime.fromJSDate(day.date).toFormat('yyyy-MM-dd');
					const subjects = day.data.map(item => `${item.subject} (${item.time}) - ${item.educator}`).join('\n');
					return `\n${formattedDate}:\n${subjects}`;
				}).join('\n');
				await ctx.reply(`–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:\n${scheduleText}`, Markup.inlineKeyboard([
					Markup.button.callback('–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ', 'show_schedule_today'),
					Markup.button.callback('–ù–∞ –∑–∞–≤—Ç—Ä–∞', 'show_schedule_tomorrow'),
					Markup.button.callback('–í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –≥—Ä—É–ø—É', 'back_to_main'),
					ctx.session.isSubscribe ? Markup.button.callback('üëé', 'unsubscribe') : Markup.button.callback('üëç', 'subscribe'),
				]));
			} else {
				await ctx.reply('–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.');
			}
		});
		
		this.bot.action("back_to_main", async (ctx) => {
			await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É");
			ctx.session.state = 'waiting_group';
		});
		
		this.bot.action("subscribe", async (ctx) => {
			ctx.session.isSubscribe = true;
			const replyMessage = await ctx.reply("–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É! –£–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ –≤–∞—à—É –≥—Ä—É–ø—É —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å —â–æ—Å—å —ñ–Ω—à–µ üòâ", Markup.inlineKeyboard([
				Markup.button.callback("–í–≤–µ—Å—Ç–∏ –≥—Ä—É–ø—É", "back_to_main"),
			]));
			ctx.session.messageId = replyMessage.message_id;
		});
		
		this.bot.action("unsubscribe", async (ctx) => {
			ctx.session.isSubscribe = false;
			const replyMessage = await ctx.reply("–°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—è, —â–æ –≤–∏ –ø—ñ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É üòä", Markup.inlineKeyboard([
				Markup.button.callback("–í–≤–µ—Å—Ç–∏ –≥—Ä—É–ø—É", "back_to_main"),
			]));
			ctx.session.messageId = replyMessage.message_id;
		});
	}
}
